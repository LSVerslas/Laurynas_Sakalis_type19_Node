NODE, EXPRESS, JSON API, CRUD
Uzduotis - TYPE19

1. Sukurti serverį naudojant express.js

2. Sukurti duomenų bazę naudojant mysql
Kuriant visą projektą, naudoti "git" su logiškais commits.

3. Sukurti penkias lenteles duomenų bazėje, pagal šį kodą:
1 - CREATE TABLE `users`(
    `user_id` int(13) UNSIGNED NOT NULL AUTO_INCREMENT,
    `name` varchar(255) NOT NULL,
    `email` varchar(255) NOT NULL,
    `password` varchar(255) NOT NULL,
    `role_id` int(13) UNSIGNED NOT NULL,
    PRIMARY KEY (`user_id`)
) ENGINE=InnoDB;

2 - CREATE TABLE `item_types`(
    `item_type_id` int(13) UNSIGNED NOT NULL AUTO_INCREMENT,
    `name` varchar(255) NOT NULL,
    PRIMARY KEY (`item_type_id`)
) ENGINE=InnoDB;

3 - CREATE TABLE `orders`(
    `order_id` int(13) UNSIGNED NOT NULL AUTO_INCREMENT,
    `user_id` int(13) UNSIGNED NOT NULL,
    `shop_item_id` int(13) UNSIGNED NOT NULL,
    `quantity` varchar(255) NOT NULL,
    `total_price` varchar(255) NOT NULL,
    `status` boolean NOT NULL DEFAULT '0',
    PRIMARY KEY(`order_id`)
) ENGINE=InnoDB;

4 - CREATE TABLE `shop_items`(
    `shop_item_id` int(13) UNSIGNED NOT NULL AUTO_INCREMENT,
    `name` varchar(255) NOT NULL,
    `price` varchar(255) NOT NULL,
    `description` text NOT NULL,
    `image` varchar(255) NOT NULL,
    `item_type_id` int(13) UNSIGNED NOT NULL,
    PRIMARY KEY (`shop_item_id`)
) ENGINE=InnoDB;

5 - CREATE TABLE `user_roles`(
    `role_id` int(13) UNSIGNED NOT NULL AUTO_INCREMENT,
    `name` varchar(255) NOT NULL,
    PRIMARY KEY (`role_id`)
) ENGINE=InnoDB;

4. Sukurti CRUD operacijas vartotojams.
4.1. POST /api/auth/register - registruoti vartotoją su "name", "email", "password", "role_id".
4.2. POST /api/auth/login - prisijungti vartotoją naudojantis "email" ir "password".

5. Sukurti CRUD operacijas parduotuvės prekėms.
5.1. POST /api/shop_items - sukurti parduotuvės prekę su "name", "price", "description", "image", "item_type_id".
5.2. GET /api/shop_items - gauti visas parduotuvės prekes.
5.3. GET /api/shop_items/:id - gauti parduotuvės prekę pagal "shop_item_id".
5.4. DELETE /api/shop_items/:id - ištrinti parduotuvės prekę, pagal "shop_item_id".

6. Rankiniu būdu (phpmyadmin) įterpti 4 ar daugiau, "item_types_id": food, drink, electronic, clothes
7. Sukurti CRUD operacijas užsakymams.
7.1. POST /api/orders - sukurti užsakymą su "user_id", "shop_item_id", "quantity", "total_price", "status".
7.2. GET /api/orders - gauti visus padarytus užsakymus. Gauta informacija, turi būti su "user_id" ir "shop_item_id" bei "price".
7.3. GET /api/orders/:id - gauti užsakymą pagal "order_id"
7.4. GET /api/orders/user/:user_id - gauti visus užsakymus, priklausancius vienam "user_id". Gauta informacija, turi būti su "user_id" "name" ir "shop_item_id" bei "price".

8. Sukurti GET maršrutą /api/user_roles - gauti visas "user_roles".
8.1 Rankiniu būdu (phpmyadmin) įterpti 3 "user_roles" į lentele: "admin", "user", "guest".

9. Sukurti užklausą middleware POST, PUT ir PATCH maršrutams patikrinimą. Pastikrinti ar užklausoje yra visi reikalingi laukai ir validuoti juos pagal tipą ir logiką.
9.1. Jei užklausoje nėra visų užpildytų reikalingų laukų, tada, parodyti klaidos pranešimą iš serverio pusės, kai pranešime vaizuojama klaidos informacija ir perspėjimas, kas negerai.
FRONTEND

1. Sukurti HTML puslapius: login.html, register.html, shop.html, add_item.html,
orders.html

2. Pridėti stiliaus ir JS failus prie kiekvieno šio puslapio.

3. Sukurti "login.html" puslapį
3.1. Kuriame bus forma su "email" ir "password" laukais.
3.2. Puslapio kūrime naudoti JavaScript, kad būtų galima siųsti "email" ir "password" į serverį.
3.3. Jei "email" ir "password" yra teisingi, išsaugoti vartotojo "email" ir "user_roles" - "localStorage", išsaugojus informaciją, vartotoją nukreipti į "shop.html".
3.4. Bet jei "email" ar "password" yra neteisingi, tada parodyti klaidos pranešima iš serverio pusės.

4. Sukurti registracijos puslapį.
4.1. Sukurti formą su "name", "email", "password", "repeatPassword" ir "user_roles" laukais.
4.1.1. "user_roles" turėty būti "select" įvestis su pasirinkimais iš "user_roles" lentelės.
4.2. Naudoti JavaScript, kad batų galima siūsti "name", "email", "password" ir "user_roles" į serverį.
4.3. Jei "email" nėra užimtas, tada sukurti vartotoją su "name", "email", "password" ir "user_roles".
4.4. Jei "email" yra užimtas, tada parodyti klaidos pranešimą iš serverio pusės.

5. Sukurti "shop.html" puslapį
5.1. Sukurti 7 prekes ir jas atvaizduoti su prisitaikančio dizaino grid išdėstymu.
5.2. Naudoti JavaScript, kad bitų galima gauti visas parduotuvės prekes iš backend.
5.3. Naudoti JavaScript, kad parodyti visas parduotuvės prekes, kaip prisitaikačio dizaino korteles, grid formatu.
5.4. Sukurti mygtuką, skirtą pridėti parduotuvės prekę į krepšelį ("orders" table)
5.5. Sukurti mygtuką, skirtą ištrinti parduotuvės prekę iš "shop_items" lentelės ir "orders" lentelės.
6. Sukurti "add_item.html" puslapį
6.1. Sukurti formą su "name", "price", "description", "image", 'item_type_id" (pasirinkti išesamų)
6.1.1. "item_type_id" turėtų būti "select" įvestis su pasirinkimais iš turimų reikšmių "item_types" lentelėje.
6.2. Naudoti JavaScript, kad būtų galima siųsti naują parduotuvės prekę į serverį.
6.3. Jei parduotuvės prekė, jau yra sukurta, nukreipti į "shop.html"
6.4. Jei tokios parduotuvės prekės nėra sukurta, rodyti klaidos pranešimą iš serverio pusės

7. Sukurti "orders.html" puslapį
7.1. Sukurti lentelę su užsakymais
7.2. Naudoti JavaScript, kad būtų galima gauti visus užsakymus iš serverio
7.3. Sukurti "select" įvestį, skirtą pasirinkti "users". Jei "user_id" yra pasirinktas, rodyti tik tuos žsakymus, kurie priklauso tam "user_id"

8. Kiekvienas puslapis turėtų turėti naršymo juostą su nuorodomis į kitus puslapius ("footer")
8.1. Jei "user_id" prisijungęs, rodyti atsijungimo mygtuką
8.2. Jei "user_id" neprisijungęs, rodyti prisijungimo ir registracijos mygtukus.

9. Sukurti atsijungimo mygtuką, atjungti prisijungusiam "user_id".
9.1. Naudoti JavaScript, kad būtų galima pašalinti "users" "email" ir "role_id" iš "localStorage"
9.2. Nukreipti į "login.html"

Extra užduotis.

1. Jei "user_id" prisijungęs ir turi "role_id" "admin", tokiu atveju rodyti puslapį "add_item.html" ir nuorodas į jį. Jei ne - slėpti puslapį.
2. Jei "user_id" prisijungęs su "role_id" "admin", tada rodyti ištrynimo mygtuką. Jei ne - slėpti mygtuką.
3. "orders.html" puslapyje, jei "user_id" prisijungęs ir turi "role_id" "admin", tada rodyti pasirinkimo įvestį, skirtą pasirinkti "user_id". Jei ne - slėpti pasirinkimą.
